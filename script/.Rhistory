return(rmse)
}
fave = function(ypred,yobs){
ave = 1- (sum((yobs - ypred)^2)/ sum((yobs- mean(yobs))^2))
return(ave)
}
for(i in 1:nrow(eval.idw)){
fold = eval.idw$fold [i]
k = eval.idw$k [i]
#fatores de normalização
split_train = data[cv_index != fold,]
split_test = data[cv_index == fold,]
model = gstat::idw(formula = z ~ 1,
locations = split_train,
newdata   = split_test,
idp = k)
eval.idw$me_train[i] = fme(model$var1.pred, split_test$z)
eval.idw$mae_train[i] = fmae(model$var1.pred, split_test$z)
eval.idw$rmse_train[i] = frmse(model$var1.pred, split_test$z)
eval.idw$ave_train[i] = fave(model$var1.pred, split_test$z)
}
library(dplyr)
eval.idw = eval.idw %>% select(-fold, k, me_train, mae_train, rmse_train, ave_train) %>% group_by(k) %>%
summarise(me_train = mean(me_train),
mae_train = mean(mae_train),
rmse_train = mean(rmse_train),
ave_train = mean(ave_train)) %>%
arrange(mae_train)
#Cross Validation
val.sph = gstat::krige.cv(z  ~ 1, locations = data, nfold = 10, idp = i)
i=0.5
#Cross Validation
val.sph = gstat::krige.cv(z  ~ 1, locations = data, nfold = 10, idp = i)
set.seed(42)
for(i in 1:nrow(eval.idw)){
fold = eval.idw$fold [i]
k = eval.idw$k [i]
#fatores de normalização
split_train = data[cv_index != fold,]
split_test = data[cv_index == fold,]
model = gstat::idw(formula = z ~ 1,
locations = split_train,
newdata   = split_test,
idp = k)
eval.idw$me_train[i] = fme(model$var1.pred, split_test$z)
eval.idw$mae_train[i] = fmae(model$var1.pred, split_test$z)
eval.idw$rmse_train[i] = frmse(model$var1.pred, split_test$z)
eval.idw$ave_train[i] = fave(model$var1.pred, split_test$z)
}
eval.idw = data.frame(expand.grid (k = c(seq (0.5, 4, by = 0.5)),
fold = 1:10,
me_train = NA,
mae_train = NA,
rmse_train = NA,
ave_train = NA))
rm(list = ls())
gc(reset=T)
graphics.off()
#install.packages("pacmann")
pacman::p_load(gstat, raster, rstudioapi, sp)
#setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data = read.csv(file = "../data/data points/data.csv", header = TRUE, sep = ',')
data <- data[,c(2,3,4)] #selecting important columns (x, y, z)
names(data) <- c("x", "y", "z")
sp::coordinates(data) = ~x+y # transform data to spatial object (x and y must be in UTM)
solo_atr<- data$z
sp::bubble(data, "z")
contorno <- shapefile("../data/boundary/cotorno.shp")
#And then we create a grid
r = raster::raster(contorno, res = 10) #  "res" sets pixel resolution
rp = raster::rasterize(contorno, r, 0)
grid = as(rp, "SpatialPixelsDataFrame")
sp::plot(grid)
sp::proj4string(data) = CRS(proj4string(grid)) # Contorno (shape) and data have the same CRS
eval.idw = data.frame(expand.grid (k = c(seq (0.5, 4, by = 0.5)),
fold = 1:10,
me_train = NA,
mae_train = NA,
rmse_train = NA,
ave_train = NA))
creat_fold_index = function(nrows, folds){
k_index = rep(1:folds, ceiling (nrows/folds))
k_index = k_index [1:nrows]
k_index = sample (k_index)
return(k_index)
}
cv_index = creat_fold_index(nrow(data), 10)
fme = function(ypred,yobs){
ae = (ypred - yobs)
me = mean(ae)
return(me)
}
fmae = function(ypred,yobs){
ae = abs(ypred - yobs)
mae = mean(ae)
return(mae)
}
frmse = function(ypred,yobs){
ae = sqrt((ypred - yobs)^2)
rmse = mean(ae)
return(rmse)
}
fave = function(ypred,yobs){
ave = 1- (sum((yobs - ypred)^2)/ sum((yobs- mean(yobs))^2))
return(ave)
}
set.seed(42)
for(i in 1:nrow(eval.idw)){
fold = eval.idw$fold [i]
k = eval.idw$k [i]
#fatores de normalização
split_train = data[cv_index != fold,]
split_test = data[cv_index == fold,]
model = gstat::idw(formula = z ~ 1,
locations = split_train,
newdata   = split_test,
idp = k)
eval.idw$me_train[i] = fme(model$var1.pred, split_test$z)
eval.idw$mae_train[i] = fmae(model$var1.pred, split_test$z)
eval.idw$rmse_train[i] = frmse(model$var1.pred, split_test$z)
eval.idw$ave_train[i] = fave(model$var1.pred, split_test$z)
}
View(eval.idw)
#Cross Validation
val.sph = gstat::krige.cv(z  ~ 1, locations = data, nfold = 10)
statistics <- c(
me = mean(val.sph$observed - val.sph$var1.pred ),
mae = median(val.sph$observed - val.sph$var1.pred ),
rmse = sqrt( mean((val.sph$observed - val.sph$var1.pred )^2 ) ),
qne =robustbase::Qn(val.sph$observed - val.sph$var1.pred , finite.corr = TRUE),
nse =1- sum((val.sph$observed - val.sph$var1.pred)^2)/ sum((val.sph$observed- mean(val.sph$observed))^2))
statistics
set.seed(42)
#Cross Validation
val.sph = gstat::krige.cv(z  ~ 1, locations = data, nfold = 10)
statistics <- c(
me = mean(val.sph$observed - val.sph$var1.pred ),
mae = median(val.sph$observed - val.sph$var1.pred ),
rmse = sqrt( mean((val.sph$observed - val.sph$var1.pred )^2 ) ),
qne =robustbase::Qn(val.sph$observed - val.sph$var1.pred , finite.corr = TRUE),
nse =1- sum((val.sph$observed - val.sph$var1.pred)^2)/ sum((val.sph$observed- mean(val.sph$observed))^2))
statistics
minha1 = eval.idw %>% select(k, me_train, mae_train, rmse_train, ave_train) %>% filter(k =2)
minha1 = eval.idw %>% select(k, me_train, mae_train, rmse_train, ave_train) %>% filter(k == 2)
minha1
minha = c(me = mean(eval.idw$me_train),
mae= mean(eval.idw$mae_train),
rmse = mean(eval.idw$rmse_train),
ave = mean(eval.idw$ave_train))
minha
statistics
set.seed(42)
#Cross Validation
val.sph = gstat::krige.cv(z  ~ 1, locations = data, nfold = 10)
statistics <- c(
me = mean(val.sph$observed - val.sph$var1.pred ),
mae = median(val.sph$observed - val.sph$var1.pred ),
rmse = sqrt( mean((val.sph$observed - val.sph$var1.pred )^2 ) ),
qne =robustbase::Qn(val.sph$observed - val.sph$var1.pred , finite.corr = TRUE),
nse =1- sum((val.sph$observed - val.sph$var1.pred)^2)/ sum((val.sph$observed- mean(val.sph$observed))^2))
statistics
statistics
statistics$mae
statistics
statistics <- c(
me = mean(val.sph$observed - val.sph$var1.pred ),
mae = median(val.sph$observed - val.sph$var1.pred ),
rmse = sqrt( mean((val.sph$observed - val.sph$var1.pred )^2 ) ),
#qne =robustbase::Qn(val.sph$observed - val.sph$var1.pred , finite.corr = TRUE),
nse =1- sum((val.sph$observed - val.sph$var1.pred)^2)/ sum((val.sph$observed- mean(val.sph$observed))^2))
statistics
statistics
model = gstat::idw(formula = z ~ 1,
locations = split_train,
newdata   = split_train,
idp = k)
set.seed(42)
for(i in 1:nrow(eval.idw)){
fold = eval.idw$fold [i]
k = eval.idw$k [i]
#fatores de normalização
split_train = data[cv_index != fold,]
split_test = data[cv_index == fold,]
model = gstat::idw(formula = z ~ 1,
locations = split_train,
newdata   = split_train,
idp = k)
eval.idw$me_train[i] = fme(model$var1.pred, split_test$z)
eval.idw$mae_train[i] = fmae(model$var1.pred, split_test$z)
eval.idw$rmse_train[i] = frmse(model$var1.pred, split_test$z)
eval.idw$ave_train[i] = fave(model$var1.pred, split_test$z)
}
minha1 = eval.idw %>% select(k, me_train, mae_train, rmse_train, ave_train) %>% filter(k == 2)
minha1
minha = c(me = mean(eval.idw$me_train),
mae= mean(eval.idw$mae_train),
rmse = mean(eval.idw$rmse_train),
ave = mean(eval.idw$ave_train))
minha
set.seed(42)
for(i in 1:nrow(eval.idw)){
fold = eval.idw$fold [i]
k = eval.idw$k [i]
#fatores de normalização
split_train = data[cv_index != fold,]
split_test = data[cv_index == fold,]
model = gstat::idw(formula = z ~ 1,
locations = split_train,
newdata   = split_test,
idp = k)
eval.idw$me_train[i] = fme(model$var1.pred, split_test$z)
eval.idw$mae_train[i] = fmae(model$var1.pred, split_test$z)
eval.idw$rmse_train[i] = frmse(model$var1.pred, split_test$z)
eval.idw$ave_train[i] = fave(model$var1.pred, split_test$z)
}
minha1 = eval.idw %>% select(k, me_train, mae_train, rmse_train, ave_train) %>% filter(k == 2)
minha1
minha = c(me = mean(eval.idw$me_train),
mae= mean(eval.idw$mae_train),
rmse = mean(eval.idw$rmse_train),
ave = mean(eval.idw$ave_train))
minha
str(val.sph)
nrow(val.sph)
nrow(val.sph$var1.pred)
krige.cv()
krige.cv
#Cross Validation
val.sph = gstat::krige.cv(z  ~ 1, locations = data, nfold = 10,set = list(idp = .5))
statistics <- c(
me = mean(val.sph$observed - val.sph$var1.pred ),
mae = median(val.sph$observed - val.sph$var1.pred ),
rmse = sqrt( mean((val.sph$observed - val.sph$var1.pred )^2 ) ),
#qne =robustbase::Qn(val.sph$observed - val.sph$var1.pred , finite.corr = TRUE),
nse =1- sum((val.sph$observed - val.sph$var1.pred)^2)/ sum((val.sph$observed- mean(val.sph$observed))^2))
statistics
i = seq(0.5, 4, by = 0.5)
val.sph = gstat::krige.cv(z  ~ 1, locations = data, nfold = 10,set = list(idp = i))
for (i in 1:nrow(data)){
val.sph = gstat::krige.cv(z  ~ 1, locations = data, nfold = 10,set = list(idp = i))
}
eval.idw = data.frame(expand.grid (i = c(seq (0.5, 4, by = 0.5))
me_train = NA,
eval.idw = data.frame(expand.grid (i = c(seq (0.5, 4, by = 0.5),
me_train = NA,
mae_train = NA,
rmse_train = NA,
ave_train = NA)))
for (i in 1:nrow(eval.idw)){
model = gstat::krige.cv(z  ~ 1, locations = data, nfold = 10,set = list(idp = i))
eval.idw$me_train[i] = fme(model$var1.pred, split_test$z)
eval.idw$mae_train[i] = fmae(model$var1.pred, split_test$z)
eval.idw$rmse_train[i] = frmse(model$var1.pred, split_test$z)
eval.idw$ave_train[i] = fave(model$var1.pred, split_test$z)
}
minha1 = eval.idw %>% select(k, me_train, mae_train, rmse_train, ave_train) %>% filter(k == 2)
minha1
minha = c(me = mean(eval.idw$me_train),
mae= mean(eval.idw$mae_train),
rmse = mean(eval.idw$rmse_train),
ave = mean(eval.idw$ave_train))
minha
View(eval.idw)
eval.idw = data.frame(expand.grid (i = c(seq (0.5, 4, by = 0.5),
me_train = NA,
mae_train = NA,
rmse_train = NA,
ave_train = NA)))
for (i in 1:nrow(eval.idw)){
model = gstat::krige.cv(z  ~ 1, locations = data, nfold = 10,set = list(idp = i))
eval.idw$me_train[i] = fme(model$var1.pred, split_test$z)
eval.idw$mae_train[i] = fmae(model$var1.pred, split_test$z)
eval.idw$rmse_train[i] = frmse(model$var1.pred, split_test$z)
eval.idw$ave_train[i] = fave(model$var1.pred, split_test$z)
}
View(eval.idw)
eval.idw = data.frame(expand.grid (i = c(seq (0.5, 4, by = 0.5),
me_train = NA,
mae_train = NA,
rmse_train = NA,
ave_train = NA)))
View(eval.idw)
remove(eval.idw)
eval.idw = data.frame(expand.grid (i = c(seq (0.5, 4, by = 0.5),
me_train = NA,
mae_train = NA,
rmse_train = NA,
ave_train = NA)))
for (i in 1:nrow(eval.idw)){
model = gstat::krige.cv(z  ~ 1, locations = data, nfold = 10,set = list(idp = i))
eval.idw$me_train[i] = fme(model$var1.pred, split_test$z)
eval.idw$mae_train[i] = fmae(model$var1.pred, split_test$z)
eval.idw$rmse_train[i] = frmse(model$var1.pred, split_test$z)
eval.idw$ave_train[i] = fave(model$var1.pred, split_test$z)
}
View(eval.idw)
eval.idw = data.frame(expand.grid (i = c(seq (0.5, 4, by = 0.5),
me_train = NA,
mae_train = NA,
rmse_train = NA,
ave_train = NA)))
View(eval.idw)
remove(eval.idw)
eval.idw = data.frame(expand.grid (i = c(seq (0.5, 4, by = 0.5),
me_train = NA,
mae_train = NA,
rmse_train = NA,
ave_train = NA)))
View(eval.idw)
eval = data.frame(expand.grid (i = c(seq (0.5, 4, by = 0.5),
me_train = NA,
mae_train = NA,
rmse_train = NA,
ave_train = NA)))
View(eval.idw)
View(eval.idw)
View(eval)
eval = data.frame(expand.grid (i = c(seq (0.5, 4, by = 0.5)),
me_train = NA,
mae_train = NA,
rmse_train = NA,
ave_train = NA))
View(eval)
eval.idw = data.frame(expand.grid (i = c(seq (0.5, 4, by = 0.5)),
me_train = NA,
mae_train = NA,
rmse_train = NA,
ave_train = NA))
for (i in 1:nrow(eval.idw)){
model = gstat::krige.cv(z  ~ 1, locations = data, nfold = 10,set = list(idp = i))
eval.idw$me_train[i] = fme(model$var1.pred, model$observed)
eval.idw$mae_train[i] = fmae(model$var1.pred, model$observed)
eval.idw$rmse_train[i] = frmse(model$var1.pred, model$observed)
eval.idw$ave_train[i] = fave(model$var1.pred, model$observed)
}
View(eval)
View(eval.idw)
set.seed(42)
rm(list = ls())
gc(reset=T)
graphics.off()
#install.packages("pacmann")
pacman::p_load(gstat, raster, rstudioapi, sp)
#setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data = read.csv(file = "../data/data points/data.csv", header = TRUE, sep = ',')
data <- data[,c(2,3,4)] #selecting important columns (x, y, z)
names(data) <- c("x", "y", "z")
sp::coordinates(data) = ~x+y # transform data to spatial object (x and y must be in UTM)
solo_atr<- data$z
sp::bubble(data, "z")
contorno <- shapefile("../data/boundary/cotorno.shp")
#And then we create a grid
r = raster::raster(contorno, res = 10) #  "res" sets pixel resolution
rp = raster::rasterize(contorno, r, 0)
grid = as(rp, "SpatialPixelsDataFrame")
sp::plot(grid)
sp::proj4string(data) = CRS(proj4string(grid)) # Contorno (shape) and data have the same CRS
eval.idw = data.frame(expand.grid (k = c(seq (0.5, 4, by = 0.5)),
fold = 1:10,
me_train = NA,
mae_train = NA,
rmse_train = NA,
ave_train = NA))
creat_fold_index = function(nrows, folds){
k_index = rep(1:folds, ceiling (nrows/folds))
k_index = k_index [1:nrows]
k_index = sample (k_index)
return(k_index)
}
cv_index = creat_fold_index(nrow(data), 10)
fme = function(ypred,yobs){
ae = (ypred - yobs)
me = mean(ae)
return(me)
}
fmae = function(ypred,yobs){
ae = abs(ypred - yobs)
mae = mean(ae)
return(mae)
}
frmse = function(ypred,yobs){
ae = sqrt((ypred - yobs)^2)
rmse = mean(ae)
return(rmse)
}
fave = function(ypred,yobs){
ave = 1- (sum((yobs - ypred)^2)/ sum((yobs- mean(yobs))^2))
return(ave)
}
set.seed(42)
for (i in 1:nrow(eval.idw)){
model = gstat::krige.cv(z  ~ 1, locations = data, nfold = 10,set = list(idp = i))
eval.idw$me_train[i] = fme(model$var1.pred, model$observed)
eval.idw$mae_train[i] = fmae(model$var1.pred, model$observed)
eval.idw$rmse_train[i] = frmse(model$var1.pred, model$observed)
eval.idw$ave_train[i] = fave(model$var1.pred, model$observed)
}
eval.idw = data.frame(expand.grid (k = c(seq (0.5, 4, by = 0.5)),
fold = 1:10,
me_train = NA,
mae_train = NA,
rmse_train = NA,
ave_train = NA,
r2_train= NA))
fr2 = function(ypred, yobs){
lin = lm(ypred ~ yobs)
r2 = (summary(lin)$r.squared)
return(r2)
}
set.seed(42)
for (i in 1:nrow(eval.idw)){
model = gstat::krige.cv(z  ~ 1, locations = data, nfold = 10,set = list(idp = i))
eval.idw$me_train[i] = fme(model$var1.pred, model$observed)
eval.idw$mae_train[i] = fmae(model$var1.pred, model$observed)
eval.idw$rmse_train[i] = frmse(model$var1.pred, model$observed)
eval.idw$ave_train[i] = fave(model$var1.pred, model$observed)
eval.idw$r2_train[i] = fr2(model$var1.pred, model$observed)
}
eval.idw = data.frame(expand.grid (k = c(seq (0.5, 4, by = 0.5))
me_train = NA,
remove(eval.idw)
eval.idw = data.frame(expand.grid (k = c(seq (0.5, 4, by = 0.5))
me_train = NA,
eval.idw = data.frame(expand.grid (k = c(seq (0.5, 4, by = 0.5)),
me_train = NA,
mae_train = NA,
rmse_train = NA,
ave_train = NA,
r2_train= NA))
set.seed(42)
for (i in 1:nrow(eval.idw)){
model = gstat::krige.cv(z  ~ 1, locations = data, nfold = 10,set = list(idp = i))
eval.idw$me_train[i] = fme(model$var1.pred, model$observed)
eval.idw$mae_train[i] = fmae(model$var1.pred, model$observed)
eval.idw$rmse_train[i] = frmse(model$var1.pred, model$observed)
eval.idw$ave_train[i] = fave(model$var1.pred, model$observed)
eval.idw$r2_train[i] = fr2(model$var1.pred, model$observed)
}
View(eval.idw)
eval.idw2 = data.frame(expand.grid (k = c(seq (0.5, 4, by = 0.5)),
me_train = NA,
mae_train = NA,
rmse_train = NA,
ave_train = NA,
r2_train= NA))
eval.idw2 = data.frame(expand.grid (k = c(seq (0.5, 4, by = 0.5)),
me_train = NA,
mae_train = NA,
rmse_train = NA,
ave_train = NA,
r2_train= NA))
set.seed(42)
for (i in 1:nrow(eval.idw2)){
model = gstat::krige.cv(z  ~ 1, locations = data, nfold = 10,set = list(idp = i))
eval.idw2$me_train[i] =  mean(model$observed - model$var1.pred )
eval.idw2$mae_train[i] = mean(model$observed - model$var1.pred )
eval.idw2$rmse_train[i] = sqrt( mean((model$observed - model$var1.pred )^2 ) )
eval.idw2$ave_train[i] = 1- sum((model$observed - model$var1.pred)^2)/ sum((model$observed- mean(model$observed))^2))
set.seed(42)
for (i in 1:nrow(eval.idw2)){
model = gstat::krige.cv(z  ~ 1, locations = data, nfold = 10,set = list(idp = i))
eval.idw2$me_train[i] =  mean(model$observed - model$var1.pred )
eval.idw2$mae_train[i] = mean(model$observed - model$var1.pred )
eval.idw2$rmse_train[i] = sqrt( mean((model$observed - model$var1.pred )^2))
eval.idw2$ave_train[i] = (1 - sum((model$observed - model$var1.pred)^2)/sum((model$observed- mean(model$observed))^2))
eval.idw2$r2_train[i] = fr2(model$var1.pred, model$observed)
}
View(eval.idw2)
View(eval.idw2)
library(dplyr)
eval.idw = eval.idw %>% select(-fold, k, me_train, mae_train, rmse_train, ave_train) %>% group_by(k) %>%
summarise(me_train = mean(me_train),
mae_train = mean(mae_train),
rmse_train = mean(rmse_train),
ave_train = mean(ave_train)) %>%
arrange(mae_train)
library(dplyr)
eval.idw = eval.idw %>% select(k, me_train, mae_train, rmse_train, ave_train) %>% group_by(k) %>%
summarise(me_train = mean(me_train),
mae_train = mean(mae_train),
rmse_train = mean(rmse_train),
ave_train = mean(ave_train)) %>%
arrange(mae_train)
library(dplyr)
eval.idw = eval.idw %>% select(k, me_train, mae_train, rmse_train, ave_train) %>% group_by(k) %>%
summarise(me_train = mean(me_train),
mae_train = mean(mae_train),
rmse_train = mean(rmse_train),
ave_train = mean(ave_train)) %>%
arrange(ave_train)
library(dplyr)
eval.idw = eval.idw %>% select(k, me_train, mae_train, rmse_train, ave_train) %>% group_by(k) %>%
summarise(me_train = mean(me_train),
mae_train = mean(mae_train),
rmse_train = mean(rmse_train),
ave_train = mean(ave_train)) %>%
arrange(desc(ave_train))
View(eval.idw)
idw_exp = eval.idw %>%  filter(mae_train == max(ave_train)) %>%  select(k)
idw_exp[1,1]
idw_exp = eval.idw %>%  filter(mae_train == max(ave_train)) %>%  select(k)
View(idw_exp)
idw_exp
idw_exp = eval.idw %>%  filter(mae_train == max(ave_train))
idw_exp
idw_exp = eval.idw %>%  filter(ave_train == max(ave_train))
idw_exp
idw_exp = eval.idw %>%  filter(ave_train == max(ave_train)) %>%  select(k)
idw_exp
mapa = idw(solo_atr ~ 1, data, grid, idp = idw_exp$k)
plot(mapa)
getwd()
